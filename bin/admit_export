#! /usr/bin/env python
#! /usr/bin/env casarun
#FLIP 2 BEFORE
#  -*- python -*-
#
#  run an ADMIT project export from the unix commandline
#
#

# python system modules
import sys, os, fnmatch, math

slow_version = 'admit_export_casa'     # slow version

#FLIP 2 NEXT   the next two lines and the first two lines in this file for the **slow_version**
have_casa = True           # slow one, via casarun
have_casa = False          # fast one, via python

if have_casa:
    # this also needs to run via casarun, python cannot run this in CASA mode
    import admit
    import admit.util.utils as utils

def usage():
    print "Usage: admit_export [-h] [-v] [-n] [-s] [-a] [-p OUS] [-l] admit_project(s)"
    print ""
    print "-h      this help"
    print "-v      verbose"
    print "-n      dryrun"
    print "-l      local storage (useful if you have no write permission where admit_projects are"
    print "-a      export all files inside the project"
    print "-s      single OUS.admit.tar.gz with all admit projects listed"
    print "-a      export all (the default is brief, i.e.. no cubes)"
    print "-p OUS  the OUS.admit basename used (default: none)"
    print ""
    if not have_casa:
        print " (this is the fast pure-python version; in brief mode it will call %s)" % slow_version
    else:
        print " (this is the slow casarun version; it should not be called directly)"
        
    sys.exit(0)

#   command line arguments  
single  = False                           # -s
brief   = True                            # -a         @todo   could be a level (encoded also in the prefix name)
verbose = False                           # -v
dryrun  = False                           # -n
local   = False                           # -l
pflag   = False;    prefix = "admit"      # -p PREFIX    (only allowed in -s mode)
aplist  = []                              # list of .admit project directories

if have_casa:
    argv = admit.utils.casa_argv(sys.argv)
else:
    argv = sys.argv

def find_files(aname, pattern):
    """ within an admit directory, return directories (casa images) matching a pattern, hierarchically
    """
    matches = []
    for root, dirnames, filenames in os.walk(aname):
        for dirname in fnmatch.filter(dirnames,pattern):
            if fnmatch.fnmatch(dirname,pattern):
                matches.append(os.path.join(root,dirname))
    return matches

def find_casa(aname):
    """ within an admit directory, return directories (casa images)
    """
    matches = []
    for root, dirnames, filenames in os.walk(aname):
        for dirname in dirnames:
            if os.path.exists(os.path.join(root,dirname,'table.info')) and os.path.exists(os.path.join(root,dirname,'table.dat')):
                matches.append(os.path.join(root,dirname))
    return matches
    

def find_exclude(aname, level=1):
    if level==1:
        # our convention of 3D cubes
        return find_files(aname,"*.im") + find_files(aname,"*.cim")
    elif level == 2:
        # all casa images
        return find_casa(aname)
    else:
        return []

def myexecs(cmds, dryrun = False):
    cmd = cmds[0]
    for c in cmds[1:]:
        cmd = cmd + " " + c
    print cmd
    if dryrun:  return
    os.system(cmd)
    
    
def myexec(cmd, dryrun = False):
    print cmd
    if dryrun:  return
    os.system(cmd)
    
# if __name__ == "__main__":

for a in argv[1:]:
    if pflag:
        pflag   = False
        prefix  = "%s.admit" % a
        continue        
    if a == '-a': brief   = False;   continue
    if a == '-p': pflag   = True;    continue
    if a == '-v': verbose = True;    continue
    if a == '-n': dryrun  = True;    continue
    if a == '-s': single  = True;    continue
    if a == '-l': local   = True;    continue
    if a == '-h': usage();           continue
    # all remaining arguments are taken as admit directories
    # in brief mode we now need the casarun version
    if not have_casa and brief:
       argv[0] = slow_version
       myexecs(argv,dryrun)
       sys.exit(1)
    aplist.append(a)

if verbose:
    print "brief,single,dryrun,verbose:",brief,single,dryrun,verbose
    print "AP:",aplist

np = len(aplist)
if np==0:
    usage()

if brief:
    if single:
        if verbose: print "brief and single tar"
        p = range(np)
        excludes = []
        for i in range(np):
            if have_casa and not dryrun:
                p[i] = admit.Project(aplist[i],commit=False)
                p[i].mergeFlow(False)
                p[i].setAstale(True,verbose,dryrun)
                p[i].writeXML(script=False)
            for f in find_exclude(aplist[i]):
                excludes.append(f)
                
        cmd = "tar -zcf %s.tar.gz " % prefix
        for f in excludes:
            cmd = cmd + ' --exclude="%s"' % f
        for i in range(np):
            cmd = cmd + ' %s' % aplist[i]
        myexec(cmd,dryrun)


        for i in range(np):
            if have_casa and not dryrun:
                p[i].setAstale(False,verbose,dryrun)
                p[i].writeXML(script=False)
            
    else:
        if verbose: print "brief and many tar"
        for ap in aplist:
            cmd = "tar -zcf %s.tar.gz " % ap
            for f in find_exclude(ap):
                cmd = cmd + ' --exclude="%s"' % f
            cmd = cmd + " %s" % ap
            if have_casa and not dryrun:
                p = admit.Project(ap,commit=False)
                p.mergeFlow(False)
                p.setAstale(True,verbose,dryrun)
                p.writeXML(script=False)
            myexec(cmd,dryrun)
            if have_casa and not dryrun:
                p.setAstale(False,verbose,dryrun)
                p.writeXML(script=False)
else:
    if single:
        if verbose: print "-a -s : full and single tar"
        cmd = "tar -zcf %s.tar.gz " % prefix
        for ap in aplist:
            cmd = cmd + " " + ap
        myexec(cmd,dryrun)
    else:
        if verbose: print "-a : full and many tar"
        for ap in aplist:
            cmd = "tar -zcf %s.tar.gz %s " % (ap,ap)
            myexec(cmd,dryrun)            
    
